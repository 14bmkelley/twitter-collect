
var fs = require('fs');
var TwitterStream = require('twitter');
var lda = require('lda');
var sentiword = require('sentiword');

/******************************************************************************
 * 
 * Collector definition.
 *
 *****************************************************************************/

var DEFAULT_TOPIC_COUNT = 5;
var DEFAULT_CORPUS_SIZE = 1000;
var LDA_WORDS_PER_TOPIC = 10;

var Collector = function Collector_constructor(options) {

   this._selectors = [];
   this._track = null;
   this._corpus_size = DEFAULT_CORPUS_SIZE;
   this._topic_count = DEFAULT_TOPIC_COUNT;
   this._credentials = {
      "access_token_key": null,
      "access_token_secret": null,
      "consumer_key": null,
      "consumer_secret": null
   };
   this._corpus = [];

   if (typeof(options) === 'undefined' || !options) {
      return;
   }

   this.select(options.select);
   this.track(options.track);
   this.corpus_size(options.corpus_size);
   this.topic_count(options.topic_count);
   this.credentials(options.credentials);
   this.corpus(options.corpus);

};

Collector.prototype.select = function Collector_select(obj) {

   if (typeof(obj) === 'undefined') {
      return Collector_select_param_error();
   }

   if (is_func(obj)) {
      obj = [ obj ];
   }

   if (!is_array(obj)) {
      return Collector_select_param_error();
   }

   this._selectors = this._selectors.concat(obj);
   return null;

};

Collector.prototype.track = function Collector_track(obj) {

   if (typeof(obj) !== 'string') {
      return Collector_track_param_error();
   }

   this._track = obj;
   return null;

};

Collector.prototype.corpus_size = function Collector_corpus_size(obj) {

   var err = null;

   if (typeof(obj) !== 'undefined' && obj && !isNaN(obj) && obj === parseInt(obj, 10)) {
      this._corpus_size = obj;
   }

   else {
      err = Collector_corpus_size_param_error();
   }

   return err;

};

Collector.prototype.topic_count = function Collector_topic_count(obj) {
   
   var err = null;

   if (typeof(obj) !== 'undefined' && obj && !isNaN(obj) && obj === parseInt(obj, 10)) {
      this._topic_count = obj;
   }

   else {
      err = Collector_topic_count_param_error();
   }

   return err;

};

Collector.prototype.credentials = function Collector_credentials(obj) {

   if (typeof(obj) === 'undefined') {
      return Collector_credential_param_error();
   }

   if (typeof(obj.access_token_key) === 'undefined' || !obj.access_token_key) {
      return Collector_credential_param_error();
   }
   else {
      this._credentials.access_token_key = obj.access_token_key;
   }

   if (typeof(obj.access_token_secret) === 'undefined' || !obj.access_token_secret) {
      return Collector_credential_param_error();
   }
   else {
      this._credentials.access_token_secret = obj.access_token_secret;
   }

   if (typeof(obj.consumer_key) === 'undefined' || !obj.consumer_key) {
      return Collector_credential_param_error();
   }
   else {
      this._credentials.consumer_key = obj.consumer_key;
   }

   if (typeof(obj.consumer_secret) === 'undefined' || !obj.consumer_secret) {
      return Collector_credential_param_error();
   }
   else {
      this._credentials.consumer_secret = obj.consumer_secret;
   }

   return null;

};

Collector.prototype.corpus = function Collector_corpus(data) {

   if (typeof(data) === 'undefined' || !data) {
      return;
   }

   if (!is_array(data)) {
      data = [ data ];
   }

   this._corpus = this._corpus.concat(data);
   return null;

};

Collector.prototype.credentials_set = function Collector_credentials_set() {
   return this._credentials.access_token_key && this._credentials.access_token_secret
      && this._credentials.consumer_key && this._credentials.consumer_secret;
};

Collector.prototype.collect = function Collector_collect(options, callback) {

   var options_selected = (typeof(options) !== 'undefined' && options);

   if (options_selected && typeof(options.select) !== 'undefined' && options.select) {
      this.select(options.select);
   }

   if (options_selected && typeof(options.topic_count) !== 'undefined' && options.topic_count) {
      this.topic_count(options.topic_count);
   }

   if (options_selected && typeof(options.credentials) !== 'undefined' && options.credentials) {
      this.credentials(options.credentials);
   }

   if (!this.credentials_set()) {
      callback(Collecter_collect_no_credentials_error());
   }

   var collector = this;

   build_corpus(collector, function() {
  
      var tweets = collector._corpus.map((tweet_data) => tweet_data.text);
      var topics = lda(tweets, collector._topic_count, LDA_WORDS_PER_TOPIC);

      callback(calculate_topic_sentiments(tweets, topics));

   });

};

function use_data(collector, data) {
   collector._corpus.push(data);
   fs.appendFileSync('./streamed-tweets.json', JSON.stringify(data) + ',');
   console.log('Streamed tweet #' + collector._corpus.length);
}

function build_corpus(collector, callback) {
   
   var selected_corpus = [];

   for (var corpus_item of collector._corpus) {

      var selected = false;

      for (var selector of collector._selectors) {
         
         selector(corpus_item, function(result) {
            selected |= result;
         });

      }

      if (selected) {
         selected_corpus.push(corpus_item);
      }

      if (selected_corpus.length === collector._corpus_size) {
         collector._corpus.length = 0;
         collector.corpus(selected_corpus);
         return callback();
      }

   }

   collector._corpus.length = 0;
   collector.corpus(selected_corpus);

   fs.writeFileSync('./streamed-tweets.json', '{ "streamed_tweets": [ ');

   var twitter_url = (collector._track) ? 'statuses/filter' : 'statuses/sample';
   var twitter_options = (collector._track) ? { track: collector._track } : {};
   var twitter_stream = new TwitterStream(collector._credentials)
      .stream(twitter_url, twitter_options);

   var end_stream = false;

   console.log('Streaming tweets until the corpus size is reached. Press any key to end prematurely.');

   twitter_stream.on('data', function(data) {

      if (collector._selectors.length === 0) {
         use_data(collector, data);
      }

      var data_selected = false;

      for (var selector of collector._selectors) {
         
         selector(data, function(result) {
            if (result) {
               data_selected = true;
            }
         });

         if (data_selected) {
            use_data(collector, data);
            break;
         }

      }

      if (end_stream || collector._corpus.length === collector._corpus_size) {
         console.log('Streaming complete.');
         fs.appendFileSync('./streamed-tweets.json', 'null ] }');
         twitter_stream.destroy();
         process.stdin.pause();
         callback();
      }


   });

   process.stdin.resume().addListener('data', function(data) {
      end_stream = true;
   });

}

function calculate_topic_sentiments(tweets, topics) {

   return topics
      
      .filter((cluster) => cluster.length > 0)
      
      .map((cluster) => {
         
         var topic_name = cluster[0].term;
         
         var topic_tweets = tweets
            
            .filter((t) => t.match(new RegExp('[^\\w]' + topic_name + '[^\\w]', 'i')))

            .map((t) => {
               return {
                  text: t,
                  sentiment: sentiword(t).sentiment
               };
            });
         
         var avg_sentiment = 0;
         
         if (topic_tweets.length > 0) {
            avg_sentiment = topic_tweets.reduce((total, tweet) => {
               return total + tweet.sentiment;
            }, 0) / topic_tweets.length;
         }

         return {
            name: topic_name,
            tweets: topic_tweets,
            avg_sentiment: avg_sentiment
         };

      });

}






/******************************************************************************
 * 
 * Utility function definitions.
 *
 *****************************************************************************/

function is_func(check_func) {
   return check_func && {}.toString.call(check_func) === '[object Function]';
}

function is_array(check_array) {
   return check_array && {}.toString.call(check_array) === '[object Array]';
}






/******************************************************************************
 * 
 * Errors definitions.
 *
 *****************************************************************************/

function Collector_select_param_error() {
   return new Error('Collector select() parameter must be a function or list '
      + 'of functions.');
}

function Collector_track_param_error() {
   return new Error('Collector track() parameter must be a string.');
}

function Collector_corpus_size_param_error() {
   return new Error('Collector corpus_size() parameter must be a number.');
}

function Collector_topic_count_param_error() {
   return new Error('Collector topic_count() parameter must be a number.');
}

function Collector_collect_no_credentials_error() {
   return new Error('Collector collect() requires valid credentials.');
}

module.exports = Collector;

